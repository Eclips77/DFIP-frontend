/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Alerts
         * @description Retrieve a paginated and filtered list of alerts.
         */
        get: operations["list_alerts_api_v1_alerts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/alerts/{alert_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Alert
         * @description Retrieve a single alert by its ID.
         */
        get: operations["get_alert_api_v1_alerts__alert_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/images/by-image-id/{image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Image Metadata By Image Id
         * @description Retrieve GridFS file metadata using the custom `image_id` from the alert.
         */
        get: operations["get_image_metadata_by_image_id_api_v1_images_by_image_id__image_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/images/{file_id}/bytes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream Image Bytes
         * @description Stream the full-size image bytes directly from GridFS.
         */
        get: operations["stream_image_bytes_api_v1_images__file_id__bytes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/images/{file_id}/thumb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stream Image Thumbnail
         * @description Stream a cached thumbnail. If the thumbnail doesn't exist, it's created,
         *     cached in a separate GridFS bucket, and then streamed.
         */
        get: operations["stream_image_thumbnail_api_v1_images__file_id__thumb_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Stats
         * @description Retrieve aggregated statistics for the dashboard KPI cards.
         *     This endpoint uses MongoDB's aggregation framework for efficiency.
         */
        get: operations["get_stats_api_v1_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stats/over-time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Stats Over Time
         * @description Retrieve time-series data for alerts, bucketed automatically.
         */
        get: operations["get_stats_over_time_api_v1_stats_over_time_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Root
         * @description A simple endpoint to confirm the API is running.
         */
        get: operations["read_root_api_v1_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AlertSchema
         * @description Pydantic model for the 'alerts' collection documents.
         *     This model is used for validation and serialization.
         * @example {
         *       "camera_id": "123",
         *       "id": "68c971856e8881dad7769617",
         *       "image_id": "5af89eae-1785-52a9-8414-07f66bc6d7a1",
         *       "level": "alert",
         *       "message": "Person detected by camera 123.",
         *       "person_id": "67862bc752f285bb212702bd25e737c7e011a3cf7f096b5c17ff3d48c6c6ac4e",
         *       "time": "2025-09-16T14:17:22.494Z"
         *     }
         */
        AlertSchema: {
            /**
             * Id
             * @default None
             */
            _id: string;
            /** Person Id */
            person_id: string;
            /**
             * Time
             * Format: date-time
             */
            time: string;
            /**
             * Level
             * @enum {string}
             */
            level: "alert" | "info" | "warning";
            /** Image Id */
            image_id: string;
            /** Camera Id */
            camera_id: string;
            /** Message */
            message: string;
        };
        /**
         * GridFSFileSchema
         * @description Pydantic model for the 'fs.files' collection documents.
         * @example {
         *       "chunkSize": 261120,
         *       "filename": "image-642f8d06.jpg",
         *       "id": "68c971cbd28b11b0e6450183",
         *       "length": 8789,
         *       "metadata": {
         *         "event_ts": "2025-09-16T14:18:50.921Z",
         *         "image_id": "642f8d06-d23f-5079-95fb-a04d88381959"
         *       },
         *       "uploadDate": "2025-09-16T14:18:51.051Z"
         *     }
         */
        GridFSFileSchema: {
            /**
             * Id
             * @default None
             */
            _id: string;
            metadata: components["schemas"]["GridFSMetaDataSchema"];
            /** Chunksize */
            chunkSize: number;
            /** Length */
            length: number;
            /**
             * Uploaddate
             * Format: date-time
             */
            uploadDate: string;
            /** Filename */
            filename: string;
        };
        /**
         * GridFSMetaDataSchema
         * @description Pydantic model for the 'metadata' sub-document within a GridFS file document.
         */
        GridFSMetaDataSchema: {
            /** Image Id */
            image_id: string;
            /**
             * Event Ts
             * Format: date-time
             */
            event_ts: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * StatsSchema
         * @description Pydantic model for the aggregated stats response.
         */
        StatsSchema: {
            /**
             * Total Alerts
             * @description Total number of alerts in the database.
             */
            total_alerts: number;
            /**
             * Alerts 24H
             * @description Number of alerts in the last 24 hours.
             */
            alerts_24h: number;
            /**
             * Distinct People
             * @description Count of unique person_id values.
             */
            distinct_people: number;
            /**
             * Active Cameras
             * @description Count of unique camera_id values.
             */
            active_cameras: number;
        };
        /**
         * TimeSeriesDataPoint
         * @description Pydantic model for a single data point in a time-series.
         */
        TimeSeriesDataPoint: {
            /**
             * Id
             * Format: date-time
             */
            _id: string;
            /** Count */
            count: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_alerts_api_v1_alerts_get: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Items per page */
                page_size?: number;
                /** @description Start of time range (ISO format) */
                start_time?: string | null;
                /** @description End of time range (ISO format) */
                end_time?: string | null;
                /** @description Filter by alert level (alert, info, warning) */
                level?: string | null;
                /** @description Filter by camera ID */
                camera_id?: string | null;
                /** @description Filter by person ID */
                person_id?: string | null;
                /** @description Text search in the message field */
                message_search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertSchema"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_alert_api_v1_alerts__alert_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                alert_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AlertSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_image_metadata_by_image_id_api_v1_images_by_image_id__image_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                image_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GridFSFileSchema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_image_bytes_api_v1_images__file_id__bytes_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_image_thumbnail_api_v1_images__file_id__thumb_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_stats_api_v1_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatsSchema"];
                };
            };
        };
    };
    get_stats_over_time_api_v1_stats_over_time_get: {
        parameters: {
            query?: {
                /** @description Number of past days to aggregate over. */
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimeSeriesDataPoint"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root_api_v1_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
